// <auto-generated />
using System;
using DonateFaith.Domain.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DonateFaith.Domain.Infra.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250522004020_AjusteRelacoes")]
    partial class AjusteRelacoes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DonateFaith.Domain.Models.AdminChurch", b =>
                {
                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<int>("ChurchId")
                        .HasColumnType("int");

                    b.HasKey("AdminId", "ChurchId");

                    b.HasIndex("ChurchId");

                    b.ToTable("AdminChurches", (string)null);
                });

            modelBuilder.Entity("DonateFaith.Domain.Models.Church", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FoundedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Churches", (string)null);
                });

            modelBuilder.Entity("DonateFaith.Domain.Models.Donation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ChurchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DonationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DonorEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DonorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("GoalsAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionId1")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChurchId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("TransactionId1");

                    b.HasIndex("UserId");

                    b.ToTable("Donations", (string)null);
                });

            modelBuilder.Entity("DonateFaith.Domain.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChurchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRegistrationOpen")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChurchId");

                    b.HasIndex("OrganizerId");

                    b.ToTable("Events", (string)null);
                });

            modelBuilder.Entity("DonateFaith.Domain.Models.FinancialReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChurchId")
                        .HasColumnType("int");

                    b.Property<decimal>("FinalBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InitialBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Period")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportFileUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<decimal>("TotalExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalIncome")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TreasurerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChurchId");

                    b.HasIndex("TreasurerId");

                    b.ToTable("FinancialReports", (string)null);
                });

            modelBuilder.Entity("DonateFaith.Domain.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("ChurchId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ChurchId");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("DonateFaith.Domain.Models.Tithe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ChurchId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TitheDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionId1")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChurchId");

                    b.HasIndex("MemberId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("TransactionId1");

                    b.HasIndex("UserId");

                    b.ToTable("Tithes", (string)null);
                });

            modelBuilder.Entity("DonateFaith.Domain.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ChurchId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChurchId");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("DonateFaith.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChurchId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChurchId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("DonateFaith.Domain.Models.AdminChurch", b =>
                {
                    b.HasOne("DonateFaith.Domain.Models.User", "Admin")
                        .WithMany("AdminChurches")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DonateFaith.Domain.Models.Church", "Church")
                        .WithMany()
                        .HasForeignKey("ChurchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Church");
                });

            modelBuilder.Entity("DonateFaith.Domain.Models.Donation", b =>
                {
                    b.HasOne("DonateFaith.Domain.Models.Church", "Church")
                        .WithMany("Donations")
                        .HasForeignKey("ChurchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DonateFaith.Domain.Models.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DonateFaith.Domain.Models.Transaction", null)
                        .WithMany("Donations")
                        .HasForeignKey("TransactionId1");

                    b.HasOne("DonateFaith.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Church");

                    b.Navigation("Transaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DonateFaith.Domain.Models.Event", b =>
                {
                    b.HasOne("DonateFaith.Domain.Models.Church", "Church")
                        .WithMany("Events")
                        .HasForeignKey("ChurchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DonateFaith.Domain.Models.User", "Organizer")
                        .WithMany()
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Church");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("DonateFaith.Domain.Models.FinancialReport", b =>
                {
                    b.HasOne("DonateFaith.Domain.Models.Church", "Church")
                        .WithMany("FinancialReports")
                        .HasForeignKey("ChurchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DonateFaith.Domain.Models.User", "Treasurer")
                        .WithMany()
                        .HasForeignKey("TreasurerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Church");

                    b.Navigation("Treasurer");
                });

            modelBuilder.Entity("DonateFaith.Domain.Models.Post", b =>
                {
                    b.HasOne("DonateFaith.Domain.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DonateFaith.Domain.Models.Church", "Church")
                        .WithMany("Posts")
                        .HasForeignKey("ChurchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Church");
                });

            modelBuilder.Entity("DonateFaith.Domain.Models.Tithe", b =>
                {
                    b.HasOne("DonateFaith.Domain.Models.Church", "Church")
                        .WithMany("Tithes")
                        .HasForeignKey("ChurchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DonateFaith.Domain.Models.User", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DonateFaith.Domain.Models.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DonateFaith.Domain.Models.Transaction", null)
                        .WithMany("Tithes")
                        .HasForeignKey("TransactionId1");

                    b.HasOne("DonateFaith.Domain.Models.User", null)
                        .WithMany("Tithes")
                        .HasForeignKey("UserId");

                    b.Navigation("Church");

                    b.Navigation("Member");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("DonateFaith.Domain.Models.Transaction", b =>
                {
                    b.HasOne("DonateFaith.Domain.Models.Church", "Church")
                        .WithMany("Transactions")
                        .HasForeignKey("ChurchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Church");
                });

            modelBuilder.Entity("DonateFaith.Domain.Models.User", b =>
                {
                    b.HasOne("DonateFaith.Domain.Models.Church", "Church")
                        .WithMany("Users")
                        .HasForeignKey("ChurchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Church");
                });

            modelBuilder.Entity("DonateFaith.Domain.Models.Church", b =>
                {
                    b.Navigation("Donations");

                    b.Navigation("Events");

                    b.Navigation("FinancialReports");

                    b.Navigation("Posts");

                    b.Navigation("Tithes");

                    b.Navigation("Transactions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DonateFaith.Domain.Models.Transaction", b =>
                {
                    b.Navigation("Donations");

                    b.Navigation("Tithes");
                });

            modelBuilder.Entity("DonateFaith.Domain.Models.User", b =>
                {
                    b.Navigation("AdminChurches");

                    b.Navigation("Tithes");
                });
#pragma warning restore 612, 618
        }
    }
}
